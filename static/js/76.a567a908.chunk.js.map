{"version":3,"file":"static/js/76.a567a908.chunk.js","mappings":"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","sources":["pages/auth/components/LogInForm.jsx","pages/auth/LoginPage.jsx","pages/auth/components/AuthNavigate.jsx","pages/auth/components/GooseImage.jsx","pages/auth/shared.styled.js","utils/schemas.js"],"sourcesContent":["import { Formik } from 'formik'\r\nimport { AuthNavigate } from './AuthNavigate'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { ROUTES } from '../../../navigation/routes'\r\nimport { loginFormSchema } from '../../../utils/schemas'\r\nimport { Button, Input, Text } from '../../../components'\r\nimport { css } from 'styled-components'\r\nimport { LoginIcon } from '../../../assets/icons'\r\nimport { AuthFormStyled } from '../shared.styled'\r\nimport { useLogin } from '../../../hooks/query'\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n}\r\n\r\nexport const LogInForm = () => {\r\n  const { t } = useTranslation()\r\n  const { login, isLoading } = useLogin()\r\n\r\n  // TODO: Vitalii task: show loader instead of button icon. add \"loading\" prop to button\r\n  console.log(isLoading)\r\n\r\n  const handleSubmit = (values, { resetForm }) => {\r\n    login(values)\r\n    resetForm()\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={handleSubmit}\r\n      validationSchema={loginFormSchema}\r\n    >\r\n      {({ errors, touched }) => (\r\n        <AuthFormStyled autoComplete='off'>\r\n          <Text\r\n            style={{ marginBottom: '40px' }}\r\n            type='h5'\r\n            color='primary'\r\n            fontWeight='600'\r\n            fontSize={24}\r\n            lineHeight={24}\r\n            mobileStyles={css`\r\n              margin-bottom: 32px;\r\n              font-size: 18px;\r\n              line-height: 24px;\r\n            `}\r\n          >\r\n            {t('Log In')}\r\n          </Text>\r\n          <Input\r\n            type='email'\r\n            name='email'\r\n            title={t('Email')}\r\n            placeholder={t('Enter your email')}\r\n            errorMessage={t(errors.email)}\r\n            successMessage={t('This is a CORRECT email')}\r\n            isError={errors.email && touched.email}\r\n          />\r\n          <Input\r\n            type='password'\r\n            name='password'\r\n            title={t('Password')}\r\n            placeholder={t('Enter password')}\r\n            errorMessage={t(errors.password)}\r\n            successMessage={t('This is a CORRECT password')}\r\n            isError={errors.password && touched.password}\r\n          />\r\n          <Button\r\n            style={{ marginTop: '8px' }}\r\n            type='submit'\r\n            fullWidth\r\n            rightIcon={<LoginIcon />}\r\n            title={t('Log In')}\r\n            variant='primary'\r\n          />\r\n          <AuthNavigate text={t('Sign Up')} route={ROUTES.REGISTER} />\r\n        </AuthFormStyled>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n","import { LogInForm } from './components/LogInForm'\r\nimport { AuthWrapper } from './shared.styled'\r\nimport { gooseLogin } from '../../assets/images'\r\nimport { GooseImage } from './components/GooseImage'\r\n\r\nconst LoginPage = () => (\r\n  <AuthWrapper>\r\n    <GooseImage image={gooseLogin} alt='image of goose in a rocket' left={0} />\r\n    <LogInForm />\r\n  </AuthWrapper>\r\n)\r\n\r\nexport default LoginPage\r\n","import { NavLink } from 'react-router-dom'\r\nimport styled, { css } from 'styled-components'\r\nimport { OpacityButton, Text } from '../../../components'\r\nimport { getMobileStyles } from '../../../styles/breakpoints'\r\n\r\nexport const AuthNavigate = ({ text, route }) => (\r\n  <OpacityButton>\r\n    <NavigateButtonStyled to={route}>\r\n      <Text\r\n        type='h5'\r\n        fontWeight='600'\r\n        mobileStyles={css`\r\n          font-size: 12px;\r\n          line-height: 14px;\r\n        `}\r\n        fontSize={18}\r\n        lineHeight={24}\r\n        color='primary'\r\n      >\r\n        {text}\r\n      </Text>\r\n    </NavigateButtonStyled>\r\n  </OpacityButton>\r\n)\r\n\r\nconst NavigateButtonStyled = styled(NavLink)`\r\n  ${({ theme: { colors } }) =>\r\n    css`\r\n      color: ${colors.primary};\r\n      position: absolute;\r\n      bottom: -24px;\r\n      left: 50%;\r\n      transform: translate(-50%, 100%);\r\n      ${getMobileStyles(css`\r\n        bottom: -18px;\r\n      `)}\r\n    `}\r\n`\r\n","import styled, { css } from 'styled-components'\r\nimport { getDesktopStyles, sizes } from '../../../styles/breakpoints'\r\nimport { useDimensions } from '../../../hooks'\r\n\r\nexport const GooseImage = ({ image, alt, right, left }) => {\r\n  const { width } = useDimensions()\r\n  const leftImageWidth = width >= sizes.desktop ? '20vw' : '25vw'\r\n\r\n  return (\r\n    <ImageOfGoose\r\n      style={{\r\n        width: `calc(${leftImageWidth} * (${width} / ${sizes.desktop}))`,\r\n        right,\r\n        left,\r\n      }}\r\n      src={image}\r\n      alt={alt}\r\n    />\r\n  )\r\n}\r\n\r\nconst ImageOfGoose = styled.img`\r\n  display: none;\r\n\r\n  ${getDesktopStyles(css`\r\n    max-width: 30vw;\r\n    display: block;\r\n    position: absolute;\r\n    bottom: 0;\r\n  `)}\r\n`\r\n","import styled, { css } from 'styled-components'\r\nimport { Form } from 'formik'\r\nimport { getBreakpointsStyles } from '../../styles/breakpoints'\r\n\r\nexport const AuthWrapper = styled.div`\r\n  ${({ theme: { colors } }) => css`\r\n    position: relative;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: ${colors.secondaryBackground};\r\n  `}\r\n`\r\n\r\nexport const AuthFormStyled = styled(Form)`\r\n  ${({ theme: { colors } }) => css`\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: absolute;\r\n    width: calc(100% - 40px);\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -55%);\r\n    padding: 40px 24px 40px 24px;\r\n    border-radius: 8px;\r\n    background-color: ${colors.background};\r\n\r\n    ${getBreakpointsStyles({\r\n      desktop: css`\r\n        padding: 40px;\r\n        width: 30%;\r\n        min-width: 400px;\r\n      `,\r\n      tablet: css`\r\n        padding: 40px;\r\n        width: 80vw;\r\n      `,\r\n    })}\r\n  `}\r\n`\r\n","import { en } from '../localization/strings/en';\r\nimport * as yup from 'yup'\r\n\r\n\r\nexport const loginFormSchema = yup.object().shape({\r\n  email: yup.string().email(en['email must be a valid email']).required(en['email is a required field']),\r\n  password: yup\r\n    .string()\r\n    .min(4, en['password must be at least 4 characters'])\r\n    .required(en['password is a required field']),\r\n})\r\n\r\nexport const registerFormSchema = yup.object().shape({\r\n  name: yup.string().required(en['name is a required field']),\r\n  email: yup.string().email(en['email must be a valid email']).required(en['email is a required field']),\r\n  password: yup\r\n    .string()\r\n    .min(4, en['password must be at least 4 characters'])\r\n    .required(en['password is a required field']),\r\n})\r\n"],"names":["initialValues","email","password","LogInForm","t","useTranslation","_useLogin","useLogin","login","isLoading","console","log","_jsx","Formik","onSubmit","values","_ref","resetForm","validationSchema","loginFormSchema","children","_ref2","errors","touched","_jsxs","AuthFormStyled","autoComplete","Text","style","marginBottom","type","color","fontWeight","fontSize","lineHeight","mobileStyles","css","_templateObject","_taggedTemplateLiteral","Input","name","title","placeholder","errorMessage","successMessage","isError","Button","marginTop","fullWidth","rightIcon","LoginIcon","variant","AuthNavigate","text","route","ROUTES","REGISTER","AuthWrapper","GooseImage","image","gooseLogin","alt","left","OpacityButton","NavigateButtonStyled","to","styled","NavLink","_templateObject2","colors","theme","_templateObject3","primary","getMobileStyles","_templateObject4","right","width","useDimensions","leftImageWidth","sizes","desktop","ImageOfGoose","concat","src","img","getDesktopStyles","div","secondaryBackground","Form","background","getBreakpointsStyles","_templateObject5","tablet","_templateObject6","yup","shape","en","required","min","registerFormSchema"],"sourceRoot":""}